# Create the predicted values
predicted <- predict(model)
# Calculate the MSE
mse_tot <- mse(clean_data$average_rating, predicted)
mse_tot
# Create the predicted values
clean_data$predicted <- predict(model)
# Calculate the MSE
mse_tot <- mse(clean_data$average_rating, clean_data$predicted)
mse_tot
View(clean_data)
clean_data <- data %>%
# Remove unnecessary columns
select(-game_id, -white_id, -black_id, -start_time, -end_time, -moves, -opening_name) %>%
# Add a new variable: average_rating
mutate(average_rating = (white_rating + black_rating) / 2) %>%
# Extract broader volume from opening_eco
mutate(opening_volume = substr(opening_eco, 1, 1)) %>%
# Transform time_increment into a continuous variable
mutate(duration = as.numeric(sub("\\+.*", "", time_increment))) %>%
# Remove columns now represented in new variables
select(-white_rating, -black_rating, -opening_eco, -time_increment)
# Display the number of variables
cat('Number of variables in cleaned data:', ncol(clean_data), '\n')
model <- lm(average_rating ~., data = clean_data)
# Create the predicted values
predicted <- predict(model)
# Calculate the MSE
mse_tot <- mse(clean_data$average_rating, predicted)
mse_tot
# Create a function for the CV
cross_validate_mse <- function(data, folds = 10, formula) {
# Assign each data point to one of the folds
data$fold <- sample(rep(1:folds, length.out = nrow(data)))
# Storage for MSE of each fold
fold_mse <- numeric(folds)
for (i in 1:folds) {
# Split the data into training and testing sets
trainset <- data %>% filter(fold != i)
testset <- data %>% filter(fold == i)
# Fit the model on the training set
model <- lm(formula, data = trainset)
# Predict on the test set
testset$predicted <- predict(model, newdata = testset)
# Calculate MSE for the current fold
fold_mse[i] <- mean((testset$average_rating - testset$predicted)^2)
}
# Calculate overall mean MSE
overall_mean_mse <- mean(fold_mse)
# Return both the fold MSEs and the overall mean MSE
return(list(fold_mse = fold_mse, overall_mean_mse = overall_mean_mse))
}
results <- cross_validate_mse(clean_data, formula = average_rating ~.)
results
# Create a function for the CV
cross_validate_mse <- function(data, folds = 10, formula) {
# Assign each data point to one of the folds
data$fold <- sample(rep(1:folds, length.out = nrow(data)))
# Storage for MSE of each fold
fold_mse <- numeric(folds)
for (i in 1:folds) {
# Split the data into training and testing sets
trainset <- data %>% filter(fold != i)
testset <- data %>% filter(fold == i)
# Fit the model on the training set
model <- lm(formula, data = trainset)
# Predict on the test set
testset$predicted <- predict(model, newdata = testset)
# Calculate MSE for the current fold
fold_mse[i] <- mean((testset$average_rating - testset$predicted)^2)
}
# Calculate overall mean MSE
overall_mean_mse <- mean(fold_mse)
# Return both the fold MSEs and the overall mean MSE
return(list(fold_mse = fold_mse, overall_mean_mse = overall_mean_mse))
}
results <- cross_validate_mse(clean_data, formula = average_rating ~.)
results
summary(model)
sum <- summary(model)
summary(model)$adj.r.squared
# Load the data
data <-  tt_load('2024-11-19')$episode_metrics
View(data)
# Load the data
data <-  tt_load('2019-02-26')
# Load the data
data <-  tt_load('2019-02-26')$full_trains
View(data)
# Load the data
data <-  tt_load('2019-03-05')
# Load the data
data <-  tt_load('2019-04-23')
# Load the data
data <-  tt_load('2019-04-23')$tidy_anime
View(data)
# Load the data
data <-  tt_load('2020-01-21')
# Load the data
data <-  tt_load('2020-01-21')$spotify_songs
View(data)
# Dimensions
cat('Number of observations:', nrow(data), '\n')
cat('Number of variables:', ncol(data), '\n')
View(data)
# Clean the data
cleaned_data <- data %>%
# Extract the year from the release date
mutate(release_year = as.numeric(substr(track_album_release_date, 1, 4))) %>%
# Select only numerical variables
select_if(is.numeric) %>%
# Add the extracted year back into the dataset
mutate(release_year = release_year) %>%
# Drop any rows with NA values to ensure clean PCA
drop_na()
# Check the structure of the cleaned data
glimpse(cleaned_data)
# Display the number of remaining observations and variables
cat('Number of variables after cleaning:', ncol(cleaned_data), '\n')
# Clean the data
cleaned_data <- data %>%
# Extract the year from the release date
mutate(release_year = as.numeric(substr(track_album_release_date, 1, 4))) %>%
# Select only numerical variables
select_if(is.numeric) %>%
# Add the extracted year back into the dataset
mutate(release_year = release_year) %>%
# Drop any rows with NA values to ensure clean PCA
drop_na()
# Display the number of remaining observations and variables
cat('Number of variables after cleaning:', ncol(cleaned_data), '\n')
# Clean the data
clean_data <- data %>%
# Extract the year from the release date
mutate(release_year = as.numeric(substr(track_album_release_date, 1, 4))) %>%
# Select only numerical variables
select_if(is.numeric) %>%
# Add the extracted year back into the dataset
mutate(release_year = release_year) %>%
# Drop any rows with NA values to ensure clean PCA
drop_na()
# Display the number of remaining observations and variables
cat('Number of variables after cleaning:', ncol(cleaned_data), '\n')
View(clean_data)
# Clean the data
clean_data <- data %>%
# Extract the year from the release date
mutate(release_year = as.numeric(substr(track_album_release_date, 1, 4))) %>%
# Select only numerical variables
select_if(is.numeric) %>%
# Remove Key and Mode which are accidentally coded as numeric in the original data
select(-c(key,mode))
# Clean the data
clean_data <- data %>%
# Extract the year from the release date
mutate(release_year = as.numeric(substr(track_album_release_date, 1, 4))) %>%
# Select only numerical variables
select_if(is.numeric) %>%
# Remove Key and Mode which are accidentally coded as numeric in the original data
select(-c(key,mode)) %>%
# Add the extracted year back into the dataset
mutate(release_year = release_year) %>%
# Drop any rows with NA values to ensure clean PCA
drop_na()
# Display the number of remaining observations and variables
cat('Number of variables after cleaning:', ncol(cleaned_data), '\n')
# Clean the data
clean_data <- data %>%
# Extract the year from the release date
mutate(release_year = as.numeric(substr(track_album_release_date, 1, 4))) %>%
# Select only numerical variables
select_if(is.numeric) %>%
# Remove Key and Mode which are accidentally coded as numeric in the original data
select(-c(key,mode)) %>%
# Add the extracted year back into the dataset
mutate(release_year = release_year) %>%
# Drop any rows with NA values to ensure clean PCA
drop_na()
# Display the number of remaining observations and variables
cat('Number of variables after cleaning:', ncol(clean_data), '\n')
# Clean the data
clean_data <- data %>%
# Extract the year from the release date
mutate(release_year = as.numeric(substr(track_album_release_date, 1, 4))) %>%
# Select only numerical variables
select_if(is.numeric) %>%
# Remove Key and Mode which are accidentally coded as numeric in the original data
select(-c(mode, key)) %>%
# Add the extracted year and genre back into the dataset
mutate(release_year = release_year, Y = data$playlist_genre)
# Display the number of remaining observations and variables
cat('Number of variables after cleaning:', ncol(clean_data), '\n')
levels(clean_data$Y)
clean_data$Y <- as.factor(clean_data$Y)
levels(clean_data$Y)
# Perform PCA on continuous predictors (excluding Y)
pca_result <- prcomp(clean_data %>% select(-Y), scale. = TRUE)
# Summary of PCA to determine variance explained by components
summary(pca_result)
# Extract PCA components into a data frame
pca_data <- as.data.frame(pca_result$x)
pca_data$Y <- clean_data$Y  # Add the outcome variable back
# Perform PCA and rotate components
pca_result <- principal(
r = cor(clean_data %>% select(-Y)),  # Correlation matrix of predictors
nfactors = ncol(clean_data) - 1,    # Number of components to retain (you can choose fewer)
rotate = "varimax",                 # Perform varimax rotation
scores = TRUE                       # Generate component scores
)
library(psych)
install.packages('psych')
knitr::opts_chunk$set(echo = TRUE)
# Read in libraries
if (!requireNamespace("tidytuesdayR", quietly = TRUE)) {
# Install tidytuesdayR if it's not already installed
install.packages("tidytuesdayR")
}
library(MASS)
library(tidyverse)
library(ISLR)
library(rpart)
library(rpart.plot)
library(e1071) # for SVM
library(randomForest)
library(nnet)
library(ipred)
library(tidytuesdayR) # For data loading
library(caret)
library(psych) # Useful for PCA
# Perform PCA and rotate components
pca_result <- principal(
r = cor(clean_data %>% select(-Y)),  # Correlation matrix of predictors
nfactors = ncol(clean_data) - 1,    # Number of components to retain (you can choose fewer)
rotate = "varimax",                 # Perform varimax rotation
scores = TRUE                       # Generate component scores
)
# Summary of rotated PCA
print(pca_result)
# Extract rotated component scores into a data frame
pca_data <- as.data.frame(pca_result$scores)
pca_data$Y <- clean_data$Y  # Add the outcome variable back
# Summary of rotated PCA
print(pca_result)
pca_result$scores
# Summary of rotated PCA
summary(pca_result)
# Summary of rotated PCA
summary(pca_result)
# Summary of rotated PCA
pca_result
# Perform PCA and rotate components
pca_result <- principal(
r = cor(clean_data %>% select(-Y)),  # Correlation matrix of predictors
nfactors = ncol(clean_data) - 1,    # Number of components to retain
rotate = "varimax",                 # Perform varimax rotation
scores = TRUE                       # Generate component scores
)
# Summary of rotated PCA
pca_result
# Extract rotated component scores into a data frame
pca_data <- as.data.frame(pca_result$scores)
pca_data$Y <- clean_data$Y  # Add the outcome variable back
pca_result$factors
# Perform PCA and rotate components
pca_result <- principal(
r = cor(clean_data %>% select(-Y)),  # Correlation matrix of predictors
nfactors = ncol(clean_data) - 1,    # Number of components to retain
rotate = "varimax",                 # Perform varimax rotation
scores = FALSE                      # Do not compute scores here
)
# Compute rotated component scores manually
# Extract original PCA scores (before rotation)
raw_pca <- prcomp(clean_data %>% select(-Y), scale. = TRUE)
# Rotated scores = raw PCA scores * rotation matrix
rotated_scores <- as.matrix(raw_pca$x[, 1:ncol(pca_result$loadings)]) %*% as.matrix(pca_result$loadings)
# Combine rotated scores into a data frame
pca_data <- as.data.frame(rotated_scores)
pca_data$Y <- clean_data$Y  # Add the outcome variable back
View(pca_data)
# Perform PCA and rotate components
pca_result <- principal(
r = cor(clean_data %>% select(-Y)),  # Correlation matrix of predictors
nfactors = ncol(clean_data) - 1,    # Number of components to retain
rotate = "varimax",                 # Perform varimax rotation
scores = FALSE                      # Do not compute scores here
)
# Compute rotated component scores manually
# Extract original PCA scores (before rotation)
raw_pca <- prcomp(clean_data %>% select(-Y), scale. = TRUE)
# Rotated scores = raw PCA scores * rotation matrix
rotated_scores <- as.matrix(raw_pca$x[, 1:ncol(pca_result$loadings)]) %*% as.matrix(pca_result$loadings)
# Combine rotated scores into a data frame
pca_data <- as.data.frame(rotated_scores)
lowerCor(pca_data) # We include this step to ensure component scores are correct
pca_data$Y <- clean_data$Y  # Add the outcome variable back
# Perform PCA and rotate components
pca_result <- principal(
r = cor(clean_data %>% select(-Y)),  # Correlation matrix of predictors
nfactors = ncol(clean_data) - 1,    # Number of components to retain
rotate = "none",                 # Perform varimax rotation
scores = FALSE                      # Do not compute scores here
)
# Compute rotated component scores manually
# Extract original PCA scores (before rotation)
raw_pca <- prcomp(clean_data %>% select(-Y), scale. = TRUE)
# Rotated scores = raw PCA scores * rotation matrix
rotated_scores <- as.matrix(raw_pca$x[, 1:ncol(pca_result$loadings)]) %*% as.matrix(pca_result$loadings)
# Combine rotated scores into a data frame
pca_data <- as.data.frame(rotated_scores)
lowerCor(pca_data) # We include this step to ensure component scores are correct
pca_data$Y <- clean_data$Y  # Add the outcome variable back
# Perform PCA with varimax rotation
pca_result <- principal(
r = cor(clean_data %>% select(-Y)),  # Correlation matrix of predictors
nfactors = ncol(clean_data) - 1,     # Number of components to retain
rotate = "varimax",                  # Perform varimax rotation
scores = FALSE                       # Do not compute scores here
)
# Extract the loadings matrix
loadings_matrix <- as.matrix(pca_result$loadings)
# Center the data (but do not scale it)
data_centered <- scale(clean_data %>% select(-Y), scale = FALSE)
# Compute rotated component scores: centered data times the loadings matrix
rotated_scores <- as.matrix(data_centered) %*% loadings_matrix
# Verify orthogonality of the rotated components
lowerCor(rotated_scores)
# Combine rotated scores into a data frame
pca_data <- as.data.frame(rotated_scores)
pca_data$Y <- clean_data$Y  # Add the outcome variable back
# Perform PCA with varimax rotation
pca_result <- principal(
r = cor(clean_data %>% select(-Y)),  # Correlation matrix of predictors
nfactors = ncol(clean_data) - 1,     # Number of components to retain
rotate = "varimax",                  # Perform varimax rotation
scores = FALSE                       # Do not compute scores here
)
# Extract the loadings matrix
loadings_matrix <- as.matrix(pca_result$loadings)
# Center the data (but do not scale it)
data_centered <- scale(clean_data %>% select(-Y), scale = FALSE)
# Compute rotated component scores: centered data times the loadings matrix
scores <- as.matrix(data_centered) %*% loadings_matrix
# Verify orthogonality of the rotated components
lowerCor(scores)
# Combine rotated scores into a data frame
pca_data <- as.data.frame(scores)
pca_data$Y <- clean_data$Y  # Add the outcome variable back
loadings_matrix
# Verify orthogonality of the rotated components
lowerCor(scores)
lowerCor(loadings_matrix)
# Perform PCA with varimax rotation
pca_result <- principal(
r = cor(clean_data %>% select(-Y)),  # Correlation matrix of predictors
nfactors = 3,     # Number of components to retain
rotate = "varimax",                  # Perform varimax rotation
scores = FALSE                       # Do not compute scores here
)
# Extract the loadings matrix
loadings_matrix <- as.matrix(pca_result$loadings)
# Center the data (but do not scale it)
data_centered <- scale(clean_data %>% select(-Y), scale = FALSE)
# Compute rotated component scores: centered data times the loadings matrix
scores <- as.matrix(data_centered) %*% loadings_matrix
# Verify orthogonality of the rotated components
lowerCor(scores)
# Combine rotated scores into a data frame
pca_data <- as.data.frame(scores)
pca_data$Y <- clean_data$Y  # Add the outcome variable back
pca_result$weights
# Perform PCA with varimax rotation
pca_result <- principal(
r = cor(clean_data %>% select(-Y)),  # Correlation matrix of predictors
nfactors = ncol(clean_data) - 1,     # Number of components to retain
rotate = "varimax",                  # Perform varimax rotation
scores = TRUE                        # Ask for scores
)
# Center the data manually
data_centered <- scale(clean_data %>% select(-Y), scale = FALSE)
# Compute PCA scores correctly: center the data and use the rotation loadings
rotated_scores <- as.matrix(data_centered) %*% as.matrix(pca_result$weights)
# Verify the orthogonality of rotated components
lowerCor(rotated_scores)
# Combine rotated scores into a data frame
pca_data <- as.data.frame(rotated_scores)
pca_data$Y <- clean_data$Y  # Add the outcome variable back
# Perform PCA with varimax rotation
pca_result <- principal(
r = cor(clean_data %>% select(-Y)),  # Correlation matrix of predictors
nfactors = 3,     # Number of components to retain
rotate = "varimax",                  # Perform varimax rotation
scores = TRUE                        # Ask for scores
)
# Center the data manually
data_centered <- scale(clean_data %>% select(-Y), scale = FALSE)
# Compute PCA scores correctly: center the data and use the rotation loadings
rotated_scores <- as.matrix(data_centered) %*% as.matrix(pca_result$weights)
# Verify the orthogonality of rotated components
lowerCor(rotated_scores)
# Combine rotated scores into a data frame
pca_data <- as.data.frame(rotated_scores)
pca_data$Y <- clean_data$Y  # Add the outcome variable back
pca_result$loadings
# Perform PCA with varimax rotation
pca_result <- principal(
r = cor(clean_data %>% select(-Y)),  # Correlation matrix of predictors
nfactors = 3,     # Number of components to retain
rotate = "none",                  # Perform varimax rotation
scores = TRUE                        # Ask for scores
)
# Center the data manually
data_centered <- scale(clean_data %>% select(-Y), scale = FALSE)
# Compute PCA scores correctly: center the data and use the rotation loadings
rotated_scores <- as.matrix(data_centered) %*% as.matrix(pca_result$weights)
# Verify the orthogonality of rotated components
lowerCor(rotated_scores)
# Combine rotated scores into a data frame
pca_data <- as.data.frame(rotated_scores)
pca_data$Y <- clean_data$Y  # Add the outcome variable back
# Perform PCA with varimax rotation
pca_result <- principal(
clean_data %>% select(-Y),
nfactors = 3,     # Number of components to retain
rotate = "none",                  # Perform varimax rotation
scores = TRUE                        # Ask for scores
)
# Center the data manually
data_centered <- scale(clean_data %>% select(-Y), scale = FALSE)
# Compute PCA scores correctly: center the data and use the rotation loadings
rotated_scores <- as.matrix(data_centered) %*% as.matrix(pca_result$weights)
# Verify the orthogonality of rotated components
lowerCor(rotated_scores)
# Combine rotated scores into a data frame
pca_data <- as.data.frame(rotated_scores)
pca_data$Y <- clean_data$Y  # Add the outcome variable back
cor(clean_data %>% select(-Y))
# Perform PCA with prcomp (no rotation, inherently orthogonal)
raw_pca <- prcomp(clean_data %>% select(-Y), scale. = TRUE, center = TRUE)
# Extract scores (already orthogonal)
rotated_scores <- raw_pca$x
# Verify orthogonality of components
lowerCor(rotated_scores)
# Combine scores with outcome variable
pca_data <- as.data.frame(rotated_scores)
pca_data$Y <- clean_data$Y
# Perform PCA with varimax rotation
pca_result <- principal(
clean_data %>% select(-Y),
nfactors = 3,     # Number of components to retain
rotate = "varimax",                  # Perform varimax rotation
scores = F                        # Ask for scores
)
# Center the data manually
data_centered <- scale(clean_data %>% select(-Y), scale = FALSE)
# Compute PCA scores correctly: center the data and use the rotation loadings
rotated_scores <- as.matrix(data_centered) %*% as.matrix(pca_result$weights)
# Verify the orthogonality of rotated components
lowerCor(rotated_scores)
# Combine rotated scores into a data frame
pca_data <- as.data.frame(rotated_scores)
pca_data$Y <- clean_data$Y  # Add the outcome variable back
View(rotated_scores)
lowerCor(pca_result$loadings)
# Perform PCA with varimax rotation
pca_result <- principal(
clean_data %>% select(-Y),
nfactors = 3,     # Number of components to retain
rotate = "varimax",                  # Perform varimax rotation
scores = F                        # Ask for scores
)
# Center the data manually
data_centered <- scale(clean_data %>% select(-Y), scale = FALSE)
# Compute PCA scores correctly: center the data and use the rotation loadings
rotated_scores <- as.matrix(data_centered) %*% as.matrix(pca_result$weights)
# Verify the orthogonality of rotated components
lowerCor(rotated_scores)
# Combine rotated scores into a data frame
pca_data <- as.data.frame(rotated_scores)
pca_data$Y <- clean_data$Y  # Add the outcome variable back
lowerCor(pca_result$loadings)
# Perform PCA with varimax rotation
pca_result <- principal(
clean_data %>% select(-Y),
nfactors = 3,     # Number of components to retain
rotate = "varimax",                  # Perform varimax rotation
scores = F                        # Ask for scores
)
# Center the data manually
data_centered <- scale(clean_data %>% select(-Y), scale = FALSE)
# Compute PCA scores correctly: center the data and use the rotation loadings
rotated_scores <- as.matrix(data_centered) %*% as.matrix(pca_result$loadings)
# Verify the orthogonality of rotated components
lowerCor(rotated_scores)
# Combine rotated scores into a data frame
pca_data <- as.data.frame(rotated_scores)
pca_data$Y <- clean_data$Y  # Add the outcome variable back
# Perform PCA with varimax rotation
pca_result <- principal(
clean_data %>% select(-Y),
nfactors = 3,       # Number of components to retain
rotate = "varimax", # Varimax rotation
scores = FALSE      # Do not compute scores automatically
)
# Center the data manually (mean subtraction)
data_centered <- scale(clean_data %>% select(-Y), scale = FALSE)
# Compute rotated scores using weights
rotated_scores <- as.matrix(data_centered) %*% as.matrix(pca_result$weights)
# Verify orthogonality or correlations of components
lowerCor(rotated_scores)
# Combine rotated scores with the outcome variable
pca_data <- as.data.frame(rotated_scores)
pca_data$Y <- clean_data$Y  # Add the outcome variable back
